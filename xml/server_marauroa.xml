<?xml version='1.0'?>
<server name="marauroa">
  <updated date="2005/05/12"/>
  <version id="0.96"/>  
  <description><![CDATA[ 
	Marauroa is arianne's content server.
	<p/> It is completely written in Java using a multithreaded server architecture
	with a UDP oriented network protocol, a MySQL based persistence engine and a 
	flexible game system. 
	<p/>The game system is totally expandable and modifiable by game developers 
	and is able to run Python scripts defining the game's rules.
	<p/> Marauroa is based on a design philosophy we called Action/Perception. 
	Each turn a perception is send to the clients explaining what they currently perceive. 
	Clients can ask the server to perform any action in their name using
	actions. 
	<p/>Marauroa is totally game agnostic and makes very little 
	assumptions about what are you trying to do, allowing a great freedom
	to create any game type.]]>
  </description>
  <extended><![CDATA[
	<p>Marauroa is based on very simple principles:<ul>
	<li>Clients communicate with the server, and vice-versa, using an UDP portable network protocol with reliability in mind to allow a stabler experience when online game lag occurs. </li>
	<li>You can develop an arianne client, using the arianne client framework, on any system that is able to compile C code. </li>
	<li>To play a game every player needs an account on the server that is identified by an username and a password. </li>
	<li>Players use their account to login into the server and then choose a 'player' stored under their account to play with. The server then checks the login information using the mySQL backend and loads the player into the game using the persistence engine. </li>
	<li>Players send actions to the server. The action system is totally open and has nothing hard-coded so you can edit it totally to your game style. The server sends at regular intervals, called turns, a perception to each player to inform them about the state of the game and any relevant state modifications. Marauroa's perception system is based on the Delta^2 ideology: simply send what has changed. </li>
	<li>The server executes some code each turn in order to move the game status on. Using this hook it is simple to code triggers, timeouts, conditions and whatever kind of behavior you need. </li>
	<li>The server transparently and automatically stores players and game status modifications on the persistence engine, and also information decided by the game developer using their game definition scripts. </li>
	<li>The server side game rules can be written in Python to allow simple and rapid development without needing to recompile the rules engine and without having to know anything about Marauroa's internals. Games
	rules can also be coded in Java. </li>
	<li>The server generates statistics of usage which are stored in a mySQL database (so you can later generate fancy statistics from them). Or in case you don't require them, they can be disabled to save CPU cycles and disk space. Marauroa features a modular structure that means modules can be changed and disabled without affecting the operation of other modules. </li>
	<li>Both the server and clients are fully and wisely documented, with documentation about specification and design and not just API documentation. </li>
	</ul>

	<p><h2>Features</h2>
	Marauroa features state-of-art technologies as:
	<ul>
	<li>Java 1.5 compatible</li>
	<li>Persistent objects</li>
	<li>Transactional relational database support</li>
	<li>Delta and Delta<sup>2</sup> Perceptions to reduce bandwidth usage</li>
    <li>Multiple independent zones of gameplay</li>
    <li>Server content streaming</li>
	<li>Turn based gameplay</li>
	<li>Nicely documented: Design and specifications available</li>
	<li>Based on a XP development model</li>
	<li>Follows KISS principle: <i>Keep it simply stupid</i></li>
	<li>True Open Source Software: GNU/GPL</li>
	</ul>
    
    <p><h2>Instructions</h2>
    You should read <a href="http://arianne.sourceforge.net/wiki/index.php/HowToBuildMarauroa">HOWTO build Marauroa</a> and
    <a href="http://arianne.sourceforge.net/wiki/index.php/InitialStepsWithMarauroa">Initial steps with Marauroa</a> for detailed,
    simple instructions about how to build and use marauroa.
    
    Remember that Marauroa is just a server middleware and so you need a game to do anything with Marauroa.
    ]]>
  </extended>
  <files>
    <file type="source" name="marauroa-XXX-src.tar.gz">
      <description>This file contains the source code to build marauroa.</description>
      <os>
        <entry name="java" status="100"/>
      </os>
      <dependencies>
        <entry name="jython" url="http://www.jython.org"/>
        <entry name="junit" url="http://junit.org"/>
        <entry name="MySQL" url="http://mysql.com"/>
      </dependencies>
    </file>
    <file type="binary" name="marauroa-XXX.zip">
      <description>This file contains the compiled version of marauroa plus all the dependencies buy MySQL.</description>
      <os>
        <entry name="java" status="100"/>
      </os>
      <dependencies>
        <entry name="MySQL" url="http://mysql.com"/>
      </dependencies>
    </file>
  </files>
  <authors>
    <entry name="Miguel Angel Blanch Lardin" url="http://arianne.sourceforge.net/wiki/index.php/MiguelAngelBlanchLardin"/>
    <entry name="Waldemar Tribus" url="http://arianne.sourceforge.net/wiki/index.php/WaldemarTribus"/>
    <entry name="Benjamin Lerman" url="http://arianne.sourceforge.net/wiki/index.php/BenjaminLerman"/>
    <entry name="Stephen Ierodiaconou" url="http://arianne.sourceforge.net/wiki/index.php/StephenIerodiaconou"/>
  </authors>
</server>
